<!-- Generated by documentation.js. Update this documentation by updating the source code. -->

### Table of Contents

*   [BetOrders][1]
    *   [fetchPublicKeys][2]
    *   [fetch][3]
    *   [betOrderQuery][4]
        *   [Parameters][5]
        *   [Examples][6]
*   [getBetOrdersByStatusForProviderWallet][7]
    *   [Parameters][8]
    *   [Examples][9]
*   [getBetOrdersByMarketForProviderWallet][10]
    *   [Parameters][11]
    *   [Examples][12]
*   [getBetOrdersByEventForProviderWallet][13]
    *   [Parameters][14]
    *   [Examples][15]
*   [ResponseFactory][16]
*   [findBetOrderPda][17]
    *   [Parameters][18]
*   [getBetOrder][19]
    *   [Parameters][20]
*   [cancelBetOrder][21]
    *   [Parameters][22]
*   [cancelBetOrdersForMarket][23]
    *   [Parameters][24]
*   [createBetOrderUiStake][25]
    *   [Parameters][26]
    *   [Examples][27]
*   [createBetOrder][28]
    *   [Parameters][29]
    *   [Examples][30]
*   [findMarketMatchingPoolPda][31]
    *   [Parameters][32]
*   [getMarketMatchingPoolAccounts][33]
    *   [Parameters][34]
*   [findMarketOutcomePda][35]
    *   [Parameters][36]
*   [findMarketOutcomeAccountPDAs][37]
    *   [Parameters][38]
*   [getMarketOutcomeAccounts][39]
    *   [Parameters][40]
*   [findMarketPositionPda][41]
    *   [Parameters][42]
*   [getMarketPosition][43]
    *   [Parameters][44]
*   [getMarketPrices][45]
    *   [Parameters][46]
*   [Markets][47]
    *   [fetchPublicKeys][48]
    *   [fetch][49]
    *   [marketQuery][50]
        *   [Parameters][51]
        *   [Examples][52]
*   [getMarketAccountsByStatus][53]
    *   [Parameters][54]
    *   [Examples][55]
*   [getMarketAccountsByEvent][56]
    *   [Parameters][57]
    *   [Examples][58]
*   [getMarketAccountsByStatusAndMintAccount][59]
    *   [Parameters][60]
    *   [Examples][61]
*   [getMarket][62]
    *   [Parameters][63]
*   [getMarkets][64]
    *   [Parameters][65]
*   [getMarketAccounts][66]
    *   [Parameters][67]
*   [uiStakeToInteger][68]
    *   [Parameters][69]
    *   [Examples][70]
*   [findEscrowPda][71]
    *   [Parameters][72]
*   [getMintInfo][73]
    *   [Parameters][74]
*   [getSolBalance][75]
    *   [Parameters][76]
    *   [Examples][77]
*   [getWalletTokenAccount][78]
    *   [Parameters][79]
*   [getWalletTokenAccounts][80]
    *   [Parameters][81]
*   [getWalletTokenBalance][82]
    *   [Parameters][83]
*   [getWalletTokenBalances][84]
    *   [Parameters][85]
*   [getWalletTokenBalancesWithSol][86]
    *   [Parameters][87]

## BetOrders

### fetchPublicKeys

Returns **GetPublicKeys** list of all fetched betOrder publicKeys

### fetch

Returns **BetOrderAccounts** fetched betOrder accounts mapped to their publicKey

### betOrderQuery

Base betOrder query builder allowing to filter by set fields and return either all accounts or only betOrder publicKeys

Some preset queries are available for convenience:

*   getBetOrdersByStatusForProviderWallet
*   getBetOrdersByMarketForProviderWallet
*   getBetOrdersByEventForProviderWallet

#### Parameters

*   `program`  {program} anchor program initialized by the consuming client

#### Examples

```javascript
const betOrders = await BetOrders.betOrderQuery(program)
      .filterByMarket(<publicKey>)
      .filterByPurchaser(<publicKey>)
      .filterByStatus(BetOrderStatus.Open)
      .fetch();

Returns all open betOrders for the provided market and purchaser wallet
```

Returns **any** betOrder publicKeys or accounts meeting query requirements

## getBetOrdersByStatusForProviderWallet

Get all betOrders owned by the program provider by betOrder status

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `status`  {betOrderStatus} status of the betOrder, provided by the BetOrderStatus enum

### Examples

```javascript
const programID = new PublicKey(ProtocolAddresses.DEVNET_STABLE)
 const provider = getProvider() as AnchorProvider
 const program = Program.at(programId, provider)
 getBetOrdersByStatusForProviderWallet(program, BetOrderStatus.Open)
```

Returns **BetOrderAccounts** fetched betOrder accounts mapped to their publicKey

## getBetOrdersByMarketForProviderWallet

Get all betOrders owned by the program provider for the given market

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of the market

### Examples

```javascript
const programID = new PublicKey(ProtocolAddresses.DEVNET_STABLE)
 const provider = getProvider() as AnchorProvider
 const program = Program.at(programId, provider)
 const marketPk = new PublicKey("5m5RyK82FQKNzMg3eDT5GY5KpbJQJhD4RhBHSG2ux4sk")
 getBetOrdersByMarketForProviderWallet(program, marketPk)
```

Returns **BetOrderAccounts** fetched betOrder accounts mapped to their publicKey

## getBetOrdersByEventForProviderWallet

Get all betOrders owned by the program provider for all markets associated with the given event

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `eventPk`  {PublicKey}  publicKey of the event

### Examples

```javascript
const programID = new PublicKey(ProtocolAddresses.DEVNET_STABLE)
 const provider = getProvider() as AnchorProvider
 const program = Program.at(programId, provider)
 const eventPk = new PublicKey("5gHfsqpTw6HQwQBc94mXEoFFrD9muKNmAnchJ376PRE4")
 getBetOrdersByEventForProviderWallet(program, eventPk)
```

Returns **BetOrderAccounts** fetched betOrder accounts mapped to their publicKey

## ResponseFactory

## findBetOrderPda

For the provided market publicKey and wallet publicKey: add a date seed and return a Program Derived Address (PDA) and the seed used. This publicKey is used for betOrder creation

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of a market
*   `purchaserPk`  {PublicKey} publicKey of the purchasing wallet

Returns **betOrderPdaResponse** publicKey of the PDA and the seed used to generate it

## getBetOrder

For the provided betOrder publicKey, get the betOrder account

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `betOrderPk`  {PublicKey} publicKey of a betOrder

Returns **BetOrder** betOrder account details

## cancelBetOrder

For the provided betOrder publicKey, cancel the betOrder if the program provider owns the betOrder

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `betOrderPk`  {PublicKey} publicKey of the betOrder to cancel

Returns **CancelBetOrderResponse** the provided betOrder publicKey and the transactionId for the request, this ID should be used to confirm the success of the transaction

## cancelBetOrdersForMarket

For the provided market publicKey, attempt to cancel all open betOrders owned by the program provider wallet

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of a market

Returns **CancelBetOrdersResponse** list of all the successfully submitted transactionIDs, list of all the failed-to-cancel betOrder publicKeys

## createBetOrderUiStake

Create a betOrder account on the Monaco protocol using a UI stake

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of the betting market to place the betOrder against
*   `marketOutcomeIndex`  {number} index of the chosen outcome
*   `backing`  {boolean} whether the betOrder is for or against the outcome
*   `odds`  {number} odds at which the betOrder should be placed, the odds should be present on the outcome pool for the market
*   `stake`  {number} UI value of the stake, the function will determine the raw value based on the market token type

### Examples

```javascript
const programID = new PublicKey(ProtocolAddresses.DEVNET_STABLE)
 const provider = getProvider() as AnchorProvider
 const program = Program.at(programId, provider)
 const marketPk = new PublicKey('7o1PXyYZtBBDFZf9cEhHopn2C9R4G6GaPwFAxaNWM33D')
 createBetOrderUiStake(program, marketPk, 1, true, 1.5, 20)
```

Returns **CreateBetOrderResponse** derived betOrder publicKey and transactionID for the request, this ID should be used to confirm the success of the transaction

## createBetOrder

Create a betOrder account on the Monaco protocol using the raw token value for the betOrder stake

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of the betting market to place the betOrder against
*   `marketOutcomeIndex`  {number} index of the chosen outcome
*   `backing`  {boolean} whether the betOrder is for or against the outcome
*   `odds`  {number} odds at which the betOrder should be placed, the odds should be present on the outcome pool for the market
*   `stake`  {number} raw token value of the betOrder taking into account the decimal amount of the token associated with the market

### Examples

```javascript
const programID = new PublicKey(ProtocolAddresses.DEVNET_STABLE)
 const provider = getProvider() as AnchorProvider
 const program = Program.at(programId, provider)
 const marketPk = new PublicKey('7o1PXyYZtBBDFZf9cEhHopn2C9R4G6GaPwFAxaNWM33D')
 createBetOrder(program, marketPk, 1, true, 1.5, 20,000,000,000)
```

Returns **CreateBetOrderResponse** derived betOrder publicKey and transactionID for the request, this ID should be used to confirm the success of the transaction

## findMarketMatchingPoolPda

For the provided market publicKey, outcome, odds and backing, return the PDA publickey of the matching account

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of a market
*   `marketOutcome`  {string} string representation of a market outcome
*   `odds`  {number} odds for the matching pool
*   `backing`  {boolean} bool representing backing or laying a market outcome

Returns **FindPdaResponse** PDA of the market matching pool account

## getMarketMatchingPoolAccounts

For the provided marketMatchingPool PDAs, return the market matching pool accounts

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketMatchingPoolPDAs`  {PublicKey\[]} PDAs of market matching pools

Returns **MarketMatchingPoolAccounts** 

## findMarketOutcomePda

For the provided market publicKey and market outcome, return the PDA publicKey of the outcome account

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of a market
*   `marketOutcome`  
*   `market_outcome`  {string} string representation of a market outcome

Returns **FindPdaResponse** PDA of the market outcome account

## findMarketOutcomeAccountPDAs

For the provided market and market outcomes, return the PDAs for the market outcome accounts

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of the market to get market outcome accounts for
*   `marketOutcomes`  {string\[]} string list of outcomes on the provided market

Returns **MarketOutcomePDAs** 

## getMarketOutcomeAccounts

For the provided market and market outcomes, return the outcome accounts for the market outcome accounts

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of the market to get market outcome accounts for
*   `marketOutcomes`  {string\[]} string list of outcomes on the provided market

Returns **MarketOutcomeAccounts** 

## findMarketPositionPda

For the provided market publicKey and purchaser wallet publicKey, return the PDA publicKey of that wallets market position account

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of a market
*   `purchaserPk`  {PublicKey} publicKey of the purchasing wallet

Returns **PublicKey** PDA of the market position for the supplied purchaser wallet

## getMarketPosition

For the provided wallet publicKey and market publicKey, return the market position account of that wallet

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of a market
*   `purchaserPk`  {PublicKey} publicKey of the purchasing wallet

Returns **MarketPosition** market position account info

## getMarketPrices

For the given market publicKey return:

*   The market account
*   The pending betOrders for the market (all unmatched/partially matched orders)
*   The market prices for the market

Market prices are all unique pending betOrder combinations (OUTCOME, ODDS, BACKING) and their corresponding matching pool accounts

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of a market

Returns **MarketPrices** Market account, pending betOrders and marketPrices with matching pools

## Markets

### fetchPublicKeys

Returns **GetPublicKeys** list of all fetched market publicKeys

### fetch

Returns **MarketAccounts** fetched market accounts mapped to their publicKey

### marketQuery

Base market query builder allowing to filter by set fields and return either all accounts or only market publicKeys

Some preset queries are available for convenience:

*   getMarketAccountsByStatus
*   getMarketAccountsByEvent
*   getMarketAccountsByStatusAndMintAccount

#### Parameters

*   `program`  {program} anchor program initialized by the consuming client

#### Examples

```javascript
const markets = await Markets.marketQuery(program)
     .filterByAuthority(<publicKey>)
     .filterByStatus(MarketStatus.Settled)
     .filterByEvent(<publicKey>)
     .fetch();

Returns all markets created by the given authority, for the specified event, with a settled status
```

Returns **any** market publicKeys or accounts meeting query requirements

## getMarketAccountsByStatus

Get all market accounts for the provided market status

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `status`  {MarketStatus} status of the market, provided by the MarketStatus enum

### Examples

```javascript
const programID = new PublicKey(ProtocolAddresses.DEVNET_STABLE)
 const provider = getProvider() as AnchorProvider
 const program = Program.at(programId, provider)
 getMarketAccountsByStatus(program, MarketStatus.Open)
```

Returns **MarketAccounts** fetched market accounts mapped to their publicKey

## getMarketAccountsByEvent

Get all market accounts for the provided event publicKey

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `eventPk`  {PublicKey} publicKey of the event

### Examples

```javascript
const programID = new PublicKey(ProtocolAddresses.DEVNET_STABLE)
 const provider = getProvider() as AnchorProvider
 const program = Program.at(programId, provider)
 const eventPk = new PublicKey("EMBekXVLLKVxteFvme4tjUfruv8WvMCQkp5xydaLzDEP")
 getMarketAccountsByEvent(program, eventPk)
```

Returns **MarketAccounts** fetched market accounts mapped to their publicKey

## getMarketAccountsByStatusAndMintAccount

Get all market accounts for the provided market status and mint account

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `status`  {MarketStatus} status of the market, provided by the MarketStatus enum
*   `mintAccount`  {PublicKey} status of the market, provided by the MarketStatus enum

### Examples

```javascript
const programID = new PublicKey(ProtocolAddresses.DEVNET_STABLE)
 const provider = getProvider() as AnchorProvider
 const program = Program.at(programId, provider)
 const mintAccount = new PublicKey("7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU")
 getMarketAccountsByStatusAndMintAccount(program, MarketStatus.Open, mintAccount)
```

Returns **MarketAccounts** fetched market accounts mapped to their publicKey

## getMarket

For the provided market publicKey, get the market account details

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of a market

Returns **MarketAccount** market account details

## getMarkets

For the provided list of market publicKeys, get the market account details

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPKs`  
*   `marketPks`  {PublicKey} publicKey of a market

Returns **MarketAccounts** list of market account details

## getMarketAccounts

For the provided market, outcome, odds and backing - return all the necessary PDAs and account information required for creation of a betOrder

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of a market
*   `backing`  {boolean} bool representing backing or laying a market
*   `marketOutcomeIndex`  {number} index representing the chosen outcome of a market
*   `odds`  {number} odds for betOrder

## uiStakeToInteger

For the provided stake and market, get a BN representation of the stake adjusted for the decimals on a markets token

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `stake`  {number} ui stake amount, i.e. how many tokens a wallet wishes to stake on an outcome
*   `marketPk`  {PublicKey} publicKey of a market

### Examples

```javascript
uiStakeToInteger(20, new PublicKey('7o1PXyYZtBBDFZf9cEhHopn2C9R4G6GaPwFAxaNWM33D'), program)
returns 20,000,000,000 for a token with 9 decimals
```

Returns **BN** ui stake adjusted for the market token decimal places

## findEscrowPda

For the provided market publicKey, return the escrow account publicKey for that market

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `marketPk`  {PublicKey} publicKey of a market

Returns **FindPdaResponse** PDA of the escrow account

## getMintInfo

For the provided spl-token, get the mint info

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `mintPK`  {PublicKey} publicKey of an spl-token

Returns **MintInfo** mint information including mint authority and decimals

## getSolBalance

Get the SOL balance for the provided program provider wallet

### Parameters

*   `program`  {program} anchor program initialized by the consuming client

### Examples

```javascript
getSolBalance)
```

Returns **GetWalletBalanceResponse** SOL balances for program providers wallet matching token account responses, including value adjusted for lamports

## getWalletTokenAccount

For the provided spl-token publicKey, and program provider wallet, get the token account for that wallet

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `tokenMint`  {PublicKey} publicKey of the spl-token

Returns **GetWalletTokenAccountResponse** token account publicKey for the provided wallet and the provided tokenAccountPK

## getWalletTokenAccounts

For the provided list of spl-token publicKeys, and program provider wallet, get the associated spl-token account for that wallet

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `tokenMints`  {PublicKey\[]} publicKeys of spl-tokens

Returns **GetWalletTokenAccountsResponse** token account publicKeys for the provided wallet and the provided tokenAccountPKs

## getWalletTokenBalance

For the provided token account get the spl-token balance for that account

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `associatedTokenAccount`  
*   `walletTokenAccount`  {WalletTokenAccount} wallet token account object containing the publicKey of an spl-token account

Returns **TokenAmount** balance of the supplied token account, if no account is found, returns zero amounts

## getWalletTokenBalances

For the provided token accounts get the spl-token balances for those account

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `walletTokenAccounts`  {WalletTokenAccount\[]} wallet token account objects containing the publicKey of spl-token accounts

Returns **[Array][88]\<WalletTokenBalance>** balances of the supplied token accounts, if no account is found, returns zero amounts

## getWalletTokenBalancesWithSol

For the provided token publicKeys get the spl-token balances and SOL balance of the program provider wallet

### Parameters

*   `program`  {program} anchor program initialized by the consuming client
*   `tokenMints`  {PublicKey\[]} publicKeys of spl-tokens

Returns **GetWalletBalancesResponse** balances of the supplied token accounts and SOL account, if no account is found, returns zero amounts

[1]: #betorders

[2]: #fetchpublickeys

[3]: #fetch

[4]: #betorderquery

[5]: #parameters

[6]: #examples

[7]: #getbetordersbystatusforproviderwallet

[8]: #parameters-1

[9]: #examples-1

[10]: #getbetordersbymarketforproviderwallet

[11]: #parameters-2

[12]: #examples-2

[13]: #getbetordersbyeventforproviderwallet

[14]: #parameters-3

[15]: #examples-3

[16]: #responsefactory

[17]: #findbetorderpda

[18]: #parameters-4

[19]: #getbetorder

[20]: #parameters-5

[21]: #cancelbetorder

[22]: #parameters-6

[23]: #cancelbetordersformarket

[24]: #parameters-7

[25]: #createbetorderuistake

[26]: #parameters-8

[27]: #examples-4

[28]: #createbetorder

[29]: #parameters-9

[30]: #examples-5

[31]: #findmarketmatchingpoolpda

[32]: #parameters-10

[33]: #getmarketmatchingpoolaccounts

[34]: #parameters-11

[35]: #findmarketoutcomepda

[36]: #parameters-12

[37]: #findmarketoutcomeaccountpdas

[38]: #parameters-13

[39]: #getmarketoutcomeaccounts

[40]: #parameters-14

[41]: #findmarketpositionpda

[42]: #parameters-15

[43]: #getmarketposition

[44]: #parameters-16

[45]: #getmarketprices

[46]: #parameters-17

[47]: #markets

[48]: #fetchpublickeys-1

[49]: #fetch-1

[50]: #marketquery

[51]: #parameters-18

[52]: #examples-6

[53]: #getmarketaccountsbystatus

[54]: #parameters-19

[55]: #examples-7

[56]: #getmarketaccountsbyevent

[57]: #parameters-20

[58]: #examples-8

[59]: #getmarketaccountsbystatusandmintaccount

[60]: #parameters-21

[61]: #examples-9

[62]: #getmarket

[63]: #parameters-22

[64]: #getmarkets

[65]: #parameters-23

[66]: #getmarketaccounts

[67]: #parameters-24

[68]: #uistaketointeger

[69]: #parameters-25

[70]: #examples-10

[71]: #findescrowpda

[72]: #parameters-26

[73]: #getmintinfo

[74]: #parameters-27

[75]: #getsolbalance

[76]: #parameters-28

[77]: #examples-11

[78]: #getwallettokenaccount

[79]: #parameters-29

[80]: #getwallettokenaccounts

[81]: #parameters-30

[82]: #getwallettokenbalance

[83]: #parameters-31

[84]: #getwallettokenbalances

[85]: #parameters-32

[86]: #getwallettokenbalanceswithsol

[87]: #parameters-33

[88]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array
